import telebot
import g4f
import datetime
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '–¢–£–¢ –¢–û–ö–ï–ù'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–∞–º—è—Ç—å

conversation_history = {}
subscriptions = {}
gpt_enabled = {}

MAX_MESSAGE_LENGTH = 4096 # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–ª–∏–Ω–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
def trim_history(history, max_length=MAX_MESSAGE_LENGTH):
    current_length = sum(len(message["content"]) for message in history)
    while history and current_length > max_length:
        removed_message = history.pop(0)
        current_length -= len(removed_message["content"])
    return history


def load_subscriptions():
#—Å–∫—Ä—ã—Ç—ã–π –∫–æ–¥

#—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    if user_id not in subscriptions:
        return None
    expiration_date = subscriptions[user_id]
    if datetime.datetime.now() > expiration_date:
        del subscriptions[user_id]  # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
        return None
    return expiration_date


def load_promocodes():
#—Å–∫—Ä—ã—Ç—ã–π –∫–æ–¥

#4 —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def write_subscription(user_id, duration):
    expiration = datetime.datetime.now() + duration
    subscriptions[user_id] = expiration
    with open('vip.txt', 'a') as f:
        f.write(f'{user_id},{expiration.isoformat()}\n')


def log_used_promo_code(user_id, promo_code):
    with open('users.txt', 'a') as f:
        f.write(f'{promo_code},{user_id}\n')


def is_promo_code_used(promo_code, user_id):
    try:
        with open('users.txt', 'r') as f:
            for line in f:
                code, uid = line.strip().split(',')
                if code == promo_code and int(uid) == user_id:
                    return True
    except FileNotFoundError:
        return False
    return False


def log_user_input(user_id, user_input):
    with open('log.txt', 'a') as f:
        f.write(f'{datetime.datetime.now()}: User ID {user_id} - Input: {user_input}\n')

#–∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_buttons(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    markup.add(
        *[telebot.types.KeyboardButton(text) for text in ['–ó–∞–ø—É—Å—Ç–∏—Ç—å GPT', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GPT', '–ü–æ–¥–ø–∏—Å–∫–∞', '–ü—Ä–æ–º–æ–∫–æ–¥']])
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

#–¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_input = message.text

    if user_id not in conversation_history:
        conversation_history[user_id] = []

    if user_id not in gpt_enabled:
        gpt_enabled[user_id] = False

    log_user_input(user_id, user_input)
    conversation_history[user_id].append({"role": "user", "content": user_input})
    conversation_history[user_id] = trim_history(conversation_history[user_id])

    if user_input == "–ó–∞–ø—É—Å—Ç–∏—Ç—å GPT":
        if check_subscription(user_id):
            gpt_enabled[user_id] = True
            bot.send_message(message.chat.id, "GPT –≤–∫–ª—é—á–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏üò¢.")
    elif user_input == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GPT":
        gpt_enabled[user_id] = False
        bot.send_message(message.chat.id, "GPT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    elif user_input == "–ü–æ–¥–ø–∏—Å–∫–∞":
        expiration = check_subscription(user_id)
        if expiration:
            remaining_time = expiration - datetime.datetime.now()
            bot.send_message(message.chat.id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. \n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time}")
        else:
            bot.send_message(message.chat.id,
                             "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ—ë —É –∞–¥–º–∏–Ω–∞ @Proger18 \n–¢–∞—Ä–∏—Ñ—ã: \n299—Ä - –º–µ—Å—è—Ü \n499—Ä - 2 –º–µ—Å—è—Ü–∞ \n750—Ä - –ø–æ–ª–≥–æ–¥–∞ \n1320—Ä - –≥–æ–¥")
    elif user_input == "–ü—Ä–æ–º–æ–∫–æ–¥":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª–∏. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É.")
        bot.register_next_step_handler(message, process_promo_code)

    if gpt_enabled[user_id]:
        thread = threading.Thread(target=gpt_response, args=(user_id, message.chat.id))
        thread.start()

#–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def gpt_response(user_id, chat_id):
    if not check_subscription(user_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        gpt_enabled[user_id] = False
        bot.send_message(chat_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. GPT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    chat_history = conversation_history[user_id]
    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.default,
            messages=chat_history,
            provider=g4f.Provider.Blackbox,
        )
        chat_gpt_response = response

    except Exception as e:
        chat_gpt_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ü§®."

    while len(chat_gpt_response) > MAX_MESSAGE_LENGTH:
        part = chat_gpt_response[:MAX_MESSAGE_LENGTH - 1] + "‚Ä¶"
        bot.send_message(chat_id, part)
        chat_gpt_response = chat_gpt_response[MAX_MESSAGE_LENGTH - 1:]

    if chat_gpt_response:
        bot.send_message(chat_id, chat_gpt_response)
        conversation_history[user_id].append({"role": "assistant", "content": chat_gpt_response})


def process_promo_code(message):
#—Å–∫—Ä—ã—Ç—ã–π –∫–æ–¥


def is_promo_code_used(promo_code, user_id):
    try:
        with open('users.txt', 'r') as f:
            for line in f:
                line = line.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                if not line:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
                try:
                    code, uid = line.split(',')
                    if code == promo_code and int(uid) == user_id:
                        return True
                except ValueError:
                    continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—É
    except FileNotFoundError:
        return False
    return False


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_subscriptions()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()